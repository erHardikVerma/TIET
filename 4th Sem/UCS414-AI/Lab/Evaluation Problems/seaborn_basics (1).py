# -*- coding: utf-8 -*-
"""Seaborn_basics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1saxILF4ynGiGDRicRCoAYkND1U8PWyrk

#Distribution Plots
Seaborn is a data visualization library built on top of matplotlib and closely integrated with pandas data structures in Python. Visualization is the central part of Seaborn which helps in exploration and understanding of data.

## Imports
"""

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

"""## Data
Seaborn comes with built-in data sets.
"""

tips = sns.load_dataset('tips')

tips.head()

"""## displot
The displot shows the distribution of a univariate set of observations.
"""

sns.displot(tips['total_bill'])

sns.displot(tips['total_bill'],bins=30)

"""### jointplot
jointplot() allows you to basically match up two displots for bivariate data. 
"""

sns.set_context('talk', font_scale=1 )
sns.jointplot(x='total_bill',y='tip',data=tips,kind='scatter')

sns.jointplot(x='total_bill',y='tip',data=tips,kind='hex')

sns.jointplot(x='total_bill',y='tip',data=tips,kind='reg')

"""### pairplot
pairplot will plot pairwise relationships across an entire dataframe (for the numerical columns) and supports a color hue argument (for categorical columns).
"""

sns.pairplot(tips)

sns.pairplot(tips, hue='sex')

sns.pairplot(tips,hue='sex',palette='coolwarm')

"""### rugplot
rugplots are actually a very simple concept, they just draw a dash mark for every point on a univariate distribution. They are the building block of a KDE plot:
"""

sns.rugplot(tips['total_bill'])

sns.displot(tips['total_bill'],kde=True)

tips = sns.load_dataset('tips')
tips.head()

"""# barplot and countplot

barplot is a general plot that allows you to aggregate the categorical data based off some function, by default the mean:
"""

sns.barplot(x='sex',y='total_bill',data=tips)

import numpy as np
sns.barplot(x='sex',y='total_bill',data=tips,estimator=np.std)

"""# countplot
This is essentially the same as barplot except the estimator is explicitly counting the number of occurrences. Which is why we only pass the x value
"""

sns.countplot(x='sex',data=tips)

"""# boxplot and violinplot
boxplots and violinplots are used to show the distribution of categorical data.
The box shows the quartiles of the dataset while the whiskers extend to show the rest of the distribution
"""

tips['day'].unique()

sns.boxplot(x="day", y="total_bill", data=tips,palette='rainbow')

sns.boxplot(x="day", y="total_bill", hue="smoker",data=tips, palette="coolwarm")

sns.violinplot(x="day", y="total_bill", data=tips,palette='rainbow')

sns.violinplot(x="day", y="total_bill", data=tips,hue='sex',split=True,palette='Set1')

"""# stripplot and swarmplot
The stripplot will draw a scatterplot where one variable is categorical.
The swarmplot is similar to stripplot(), but the points are adjusted (only along the categorical axis) so that they donâ€™t overlap. This gives a better representation of the distribution of values.
"""

sns.stripplot(x="day", y="total_bill", data=tips)

sns.stripplot(x="day", y="total_bill", data=tips,jitter=False)

sns.stripplot(x="day", y="total_bill", data=tips,jitter=True,hue='sex',palette='Set1')

sns.stripplot(x="day", y="total_bill", data=tips,jitter=True,hue='sex',palette='Set1',dodge=True)

sns.swarmplot(x="day", y="total_bill", data=tips)

"""# catplot
catplot/factorplot is the most general form of a categorical plot. It can take in a kind parameter to adjust the plot type
"""

sns.catplot(x='sex',y='total_bill',data=tips,kind='bar')

"""# Matrix Plots
Heatmap and Clustermap
"""

flights = sns.load_dataset('flights')

flights.head()

# Matrix form for correlation data
tp = tips.corr()

tp

sns.heatmap(tp)

sns.heatmap(tips.corr(),cmap='coolwarm',annot=True)

"""### for the flights data:"""

flights.pivot_table(values='passengers',index='month',columns='year')

pvflights = flights.pivot_table(values='passengers',index='month',columns='year')
sns.heatmap(pvflights)

sns.heatmap(pvflights,cmap='magma',linecolor='white',linewidths=1)

"""## clustermap
The clustermap uses hierarchal clustering to produce a clustered version of the heatmap.
"""

sns.clustermap(pvflights)

# More options to get the information a little clearer like normalization
sns.clustermap(pvflights,cmap='coolwarm',standard_scale=1)

"""## Grids
Grids are general types of plots that allow you to map plot types to rows and columns of a grid, this helps you create similar plots separated by features.
"""

iris = sns.load_dataset('iris')

iris.head()

"""## PairGrid
Pairgrid is a subplot grid for plotting pairwise relationships in a dataset.
## pairplot
pairplot is a simpler version of PairGrid
"""

sns.pairplot(iris)

# Just the Grid
sns.PairGrid(iris)

# Then you map to the grid
g = sns.PairGrid(iris)
g.map(plt.scatter)

# Map to upper,lower, and diagonal
g = sns.PairGrid(iris)
g.map_diag(plt.hist)
g.map_upper(plt.scatter)
g.map_lower(sns.kdeplot)

"""# Facet Grid
FacetGrid is the general way to create grids
"""

g = sns.FacetGrid(tips, col="time", row="smoker")

g = sns.FacetGrid(tips, col="time",  row="smoker")
g = g.map(plt.hist, "total_bill")

g = sns.FacetGrid(tips, col="time",  row="smoker",hue='sex')
# Notice hwo the arguments come after plt.scatter call
g = g.map(plt.scatter, "total_bill", "tip").add_legend()

